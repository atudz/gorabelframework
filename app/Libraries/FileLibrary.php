<?php

namespace App\Libraries;

use App\Core\LibraryCore;
use App\Core\ModelCore;
use Illuminate\Http\Request;
use App\Types\GiftCardType;

/**
 * This is a library class for File
 *
 * @author abner
 *
 */

class FileLibrary extends LibraryCore
{
	/**
	 * The configuration keys for the directories
	 * @var $configKeys
	 * 
	 */
	protected $configKeys = [
			'user_photo',
			'gift_card_photo',	
			'gift_card_video',
			'gift_card_category_images',
			'message_audio',
			'message_video',
			'qrcodes',
			'product_photo',
			'product_thumbnails',
			'icons',
			'printing_orders',
			'notifications',
		];
	
	/**
	 * The supported file mime types
	 * @var $fileTypes
	 */
	protected $fileTypes = [
			// image
			'image/tiff' => 'img',
			'image/gif'=> 'img',
			'image/png'=> 'img',
			'image/jpeg'=> 'img',
			// audio
			'audio/aac' => 'aud',
			'audio/mp4'=> 'aud',
			'audio/mpeg'=> 'aud',
			'audio/ogg'=> 'aud',
			'audio/wav'=> 'aud',
			'audio/webm'=> 'aud',
			// video
			'video/mp4' => 'vid',
			'video/ogg'=> 'vid',
			'video/webm'=> 'vid',
			'image/jpeg'=> 'vid',
	];
	/**
	 * The subject model
	 * @var $subjectModel
	 */
	protected $subjectModel;
	
	/**
	 * The subject model's filename column
	 * @var $column
	 */
	protected $column;
	
	/**
	 * The file tag. It can be vid for video, aud for audio, img for image.
	 * Default is img.
	 * @var $fileTag
	 */
	protected $fileTag = 'img';
	
	/**
	 * The class constructor
	 */
	public function __construct(ModelCore $model = NULL, $column = '')
	{
		if(is_object($model))
		{
			$this->setModel($model,$column);
		}
	}
	
	/**
	 * Set subject model
	 * @param ModelCore $model
	 * @return This object
	 */
	public function setModel(ModelCore $model, $column)
	{
		
		$this->subjectModel = $model;
		$this->column = $column;
		
		return $this;
	}
	
	/**
	 * Get subject model
	 * @return void
	 */
	public function getModel()
	{
		return $this->subjectModel;
	}
	
	/**
	 * Gets the column attribute value
	 * @return \App\Libraries\$column
	 */
	public function getColumn()
	{
		return $this->column;
	}
	
	
	/**
	 * Gets the string byte contents of the file
	 * @param string $filename
	 * @return Mixed false if file not found, otherwise the string byte contents
	 */
	public function getContent($filename='')
	{
		$path = $filename;
		if($this->subjectModel)
		{
			$path = $this->getConfigPath().$this->subjectModel->{$this->column};
		}
		
		return \Storage::get($path);
	}
	
	/**
	 * Save the file to the file storage system and the corresponding related data
	 * to the database.
	 * @param Request $request The request object
	 * @param string $key the file key
	 * @param boolean $replace Replace the file flag 
	 * @return boolean True on success, otherwise false
	 */
	public function save(Request $request, $key, $replace=false)
	{
		$file = $request->file($key);		
		if($file)
		{
			$mimeType = $file->getMimeType();
			$extension = $file->guessExtension();				
			$filename = $this->generateFileName($extension,$mimeType);
			$configPath = $this->getConfigPath();
			$fullpath = $configPath.$filename;
			if(false !== $this->saveFullPath($fullpath,file_get_contents($file->getRealPath())))
			{
				// Update models filename attirbute
				if($this->subjectModel)
				{
					$old = $this->subjectModel->{$this->column};
					$this->subjectModel->{$this->column} = $filename;
					if($replace)
					{
						if($this->subjectModel->save() && $old)
						{
							if(!file_exists($configPath.$old))
							{
								return true;
							}
							return \Storage::delete($configPath.$old);
						}
					}
					else 
					{
						return $this->subjectModel->save();
					}
				}
			}
		}
		return false;
	}
	
	/**
	 * Saves file using its full path url
	 * @param string $path The full path of the file
	 * @param string $contents The string byte contents
	 */
	public function saveFullPath($path, $contents)
	{
		return \Storage::put($path, $contents);
	}
	
	/**
	 * Auto generates the filenem
	 * @param $extension string The file extension 
	 * @return string The autogenerated unique filename
	 */
	public function generateFileName($extension='',$mimeType='')
	{
		if($mimeType)
		{
			if(isset($this->fileTypes[$mimeType]))
			{
				$this->fileTag = $this->fileTypes[$mimeType];
			}
		}
		
		return uniqid($this->fileTag.'_').'.'.$extension;
	}
	
	
	/**
	 * Gets the config path
	 * @param ModelCore $model The Elloquent model
	 * @return string
	 */
	public function getConfigPath(ModelCore $model = NULL)
	{
		$path = '';
		if(isset($this->configKeys[$this->getConfigKeyFromModel($model)]));
		{
			$path = config('storage_directory.'.$this->getConfigKeyFromModel($model));
		}
		
		return $path;
	}
	
	/**
	 * Gets config key base from model
	 * @param ModelCore $model The Elloquent model
	 * @return string
	 */
	protected function getConfigKeyFromModel(ModelCore $model=NULL)
	{
		$key = '';
		if(!$this->subjectModel && !$model)
		{
			return $key;
		}
		
		$targetModel = $model ? $model : $this->subjectModel;
		
		switch($targetModel->getTable())
		{
			case 'users':
				$key = 'user_photo';		
				break;
			case 'gift_card':
				if($targetModel->type == GiftCardType::VIDEO_TYPE)
				{
					$key = 'gift_card_video';
				}
				else
				{
					$key = 'gift_card_photo';
				}
				break;
			case 'user_messages':
				if($targetModel->type == 1)
				{
					$key = 'message_audio';
				}
				elseif($targetModel->type == 2)
				{
					$key = 'message_video';
				}
				break;
			case 'order_details':
				$key = 'qrcodes';
				break;
			case 'product_images':
				$key = 'product_photo';
				break;
			case 'printing_orders':
				$key = 'printing_orders';
				break;
			case 'notifications':
				$key = 'notifications';
				break;
			case 'gift_card_category':
				$key = 'gift_card_category_images';
				break;
			/*case 'users':
				$key = 'icons';
				break;*/
		}
		
		return $key;
	}
	
	/**
	 * Gets the url path of the file
	 * @param string $fullpath
	 * @return string
	 */
	public function getFileUrl($fullpath=false)
	{
		$url = '';
		$filename = '';
		if($this->subjectModel)
		{
			$filename = $this->subjectModel->{$this->column};
		}
		
		$url = $this->getConfigPath().$filename;
		if($fullpath)
		{
			$url = config('filesystems.disks.local.root').$url;
		}
		return $url;
	}
	
	/**
	 * Gets the public url for the file
	 * @param ModelCore The subject model
	 * @param string $column The column name
	 * @return string
	 */
	public function getPublicUrl(ModelCore $model=NULL, $column='')
	{
		$url = '';
		$filename = '';
		if($model)
		{
			$filename = $model->{$column};
			$this->column = $column;
		}
		elseif($this->subjectModel)
		{
			$filename = $this->subjectModel->{$this->column};
		}
		
		if(!$filename)
		{
			return $url;
		}
		
		$configPath = $this->getConfigPath($model);
		if(false !== strpos($configPath, '/public'))
		{
			$url = str_replace('/public', '', $configPath).$filename;
		}
		
		return $url;
	}
	
	/**
	 * Set column value
	 * @param string $column
	 */
	public function setColumn($column)
	{
		$this->column = $column;
		
		return $this;
	}
	
	/**
	 * Destroy the file and the subject model's data
	 * @param bool $force
	 * @param string $column 
	 * @return boolean
	 */
	public function destroy($columns=[])
	{
		if(!$this->subjectModel)
		{
			return false;
		}
		
		$targetColumns = $columns ? $columns : $this->column;
		if(!$targetColumns)
		{
			return false;
		}
		
		foreach($targetColumns as $column)
		{
			if(!$configPath = $this->getConfigPath())
			{
				return false;
			}
			
			$filename = $this->subjectModel->{$column};
			if(!\Storage::delete($configPath.$filename))
			{
				return false;
			}
			
		}
		
		return $this->subjectModel->forceDelete(); 	
	}
}

